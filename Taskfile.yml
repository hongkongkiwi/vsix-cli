version: '3'

vars:
  SCRIPT_NAME: vsix-cli
  DOCKER_IMAGE: vsix-cli:dev
  DOCKER_REGISTRY: ghcr.io/hongkongkiwi/vsix-cli

tasks:
  default:
    desc: Run all basic tests
    deps: [lint, syntax, test-basic]

  # Development Tasks
  setup:
    desc: Setup development environment
    cmds:
      - task: install-deps
      - task: make-executable

  install-deps:
    desc: Install required dependencies
    platforms: [linux]
    cmds:
      - sudo apt-get update
      - sudo apt-get install -y shellcheck curl jq
    status:
      - command -v shellcheck
      - command -v curl
      - command -v jq

  install-deps:macos:
    desc: Install dependencies on macOS
    platforms: [darwin]
    cmds:
      - |
        if ! command -v brew >/dev/null 2>&1; then
          echo "Homebrew is not installed. Please install it first:"
          echo "  /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
          exit 1
        fi
        brew install shellcheck curl jq
    status:
      - command -v shellcheck
      - command -v curl
      - command -v jq

  check-deps:
    desc: Check if all dependencies are installed
    cmds:
      - command -v shellcheck || (echo "shellcheck not found" && exit 1)
      - command -v curl || (echo "curl not found" && exit 1)
      - command -v jq || (echo "jq not found" && exit 1)
      - command -v docker || echo "docker not found (optional)"

  make-executable:
    desc: Make the script executable
    cmds:
      - chmod +x {{.SCRIPT_NAME}}
    sources:
      - "{{.SCRIPT_NAME}}"

  # Linting and Quality
  lint:
    desc: Lint the shell script with ShellCheck
    deps: [make-executable]
    cmds:
      - shellcheck {{.SCRIPT_NAME}}
    sources:
      - "{{.SCRIPT_NAME}}"

  syntax:
    desc: Check bash syntax
    cmds:
      - bash -n {{.SCRIPT_NAME}}
    sources:
      - "{{.SCRIPT_NAME}}"

  security:
    desc: Run security checks
    cmds:
      - |
        echo "Checking for hardcoded secrets..."
        if grep -E -i "(password|secret|api_key|auth_key|private_key|access_token|bearer_token)\s*=" {{.SCRIPT_NAME}} | grep -v -E "(#|show_|config_|Available|Example|Usage)" | grep -q .; then
          echo "Potential hardcoded secrets found:"
          grep -E -i "(password|secret|api_key|auth_key|private_key|access_token|bearer_token)\s*=" {{.SCRIPT_NAME}} | grep -v -E "(#|show_|config_|Available|Example|Usage)"
          exit 1
        fi
        echo "No hardcoded secrets detected"
      - |
        echo "Checking for unsafe practices..."
        unsafe_found=false
        if grep -n "eval" {{.SCRIPT_NAME}} | grep -v "#"; then
          echo "Found potentially unsafe 'eval' usage"
          unsafe_found=true
        fi
        if grep -n "curl.*-k\|wget.*--no-check-certificate" {{.SCRIPT_NAME}}; then
          echo "Found insecure SSL bypass"
          unsafe_found=true
        fi
        if [ "$unsafe_found" = "true" ]; then
          exit 1
        fi
        echo "No unsafe practices detected"
      - echo "Security scan passed"

  # Testing Tasks
  test-basic:
    desc: Run basic functionality tests
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} --help
      - ./{{.SCRIPT_NAME}} version

  test-essential:
    desc: Run essential tests (basic + core functionality)
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} --help
      - ./{{.SCRIPT_NAME}} version
      - ./{{.SCRIPT_NAME}} info ms-python.python
      - ./{{.SCRIPT_NAME}} download --dry-run ms-python.python

  test-help:
    desc: Test help command
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} --help

  test-version:
    desc: Test version command
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} version

  test-search:
    desc: Test search functionality
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} search python --limit 3

  test-download:
    desc: Test download functionality (dry run)
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} download --dry-run ms-python.python

  test-info:
    desc: Test extension info functionality
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} info ms-python.python

  test-config:
    desc: Test configuration commands
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} config get || true
      - ./{{.SCRIPT_NAME}} config set default_marketplace openvsx || true
      - ./{{.SCRIPT_NAME}} config get default_marketplace || true
      - ./{{.SCRIPT_NAME}} config reset || true

  test-marketplaces:
    desc: Test different marketplace functionality
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} info --marketplace official ms-python.python
      - ./{{.SCRIPT_NAME}} info --marketplace openvsx ms-python.python || true
      - ./{{.SCRIPT_NAME}} info --marketplace coder ms-python.python || true

  test-urls:
    desc: Test URL parsing functionality
    deps: [make-executable]
    cmds:
      - ./{{.SCRIPT_NAME}} info "https://marketplace.visualstudio.com/items?itemName=ms-python.python"
      - ./{{.SCRIPT_NAME}} download --dry-run "https://open-vsx.org/extension/ms-python/python"

  test-errors:
    desc: Test error handling
    deps: [make-executable]
    cmds:
      - |
        set +e
        ./{{.SCRIPT_NAME}} download invalid.extension.id 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "Error: Should have failed with invalid extension ID"
          exit 1
        fi
        ./{{.SCRIPT_NAME}} info --marketplace invalid-marketplace ms-python.python 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "Error: Should have failed with invalid marketplace"
          exit 1
        fi
        echo "Error handling tests passed"

  test-all:
    desc: Run comprehensive test suite
    deps: [lint, syntax, security]
    cmds:
      - task: test-basic
      - task: test-search
      - task: test-download
      - task: test-info
      - task: test-config
      - task: test-marketplaces
      - task: test-urls
      - task: test-errors

  performance:
    desc: Run performance tests
    deps: [make-executable]
    cmds:
      - |
        echo "Testing startup time..."
        start_time=$(date +%s%N)
        ./{{.SCRIPT_NAME}} --help >/dev/null
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        echo "Startup time: ${duration}ms"
        
        # Set reasonable thresholds
        if [ $duration -gt 3000 ]; then
          echo "Error: Startup time too slow (${duration}ms > 3000ms)"
          exit 1
        elif [ $duration -gt 1500 ]; then
          echo "Warning: Startup time is slow (${duration}ms > 1500ms)"
        else
          echo "Startup time is acceptable"
        fi
        
        echo "Testing basic command performance..."
        start_time=$(date +%s%N)
        ./{{.SCRIPT_NAME}} version >/dev/null
        end_time=$(date +%s%N)
        version_duration=$(( (end_time - start_time) / 1000000 ))
        echo "Version command time: ${version_duration}ms"
        
        if [ $version_duration -gt 1000 ]; then
          echo "Warning: Version command is slow (${version_duration}ms > 1000ms)"
        fi

  # Docker Tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}} -t {{.DOCKER_REGISTRY}}:dev .
    sources:
      - Dockerfile
      - .dockerignore
      - "{{.SCRIPT_NAME}}"

  docker:test:
    desc: Test Docker image
    deps: [docker:build]
    cmds:
      - docker run --rm {{.DOCKER_IMAGE}} --help
      - docker run --rm {{.DOCKER_IMAGE}} version
      - docker run --rm {{.DOCKER_IMAGE}} download --dry-run ms-python.python

  docker:test-volume:
    desc: Test Docker image with volume mount
    deps: [docker:build]
    cmds:
      - mkdir -p test-output
      - docker run --rm -v $(pwd)/test-output:/output {{.DOCKER_IMAGE}} download --dry-run ms-python.python
      - rm -rf test-output

  docker:clean:
    desc: Clean Docker images
    cmds:
      - docker rmi {{.DOCKER_IMAGE}} 2>/dev/null || true

  docker:all:
    desc: Run all Docker tests
    cmds:
      - task: docker:build
      - task: docker:test
      - task: docker:test-volume

  # Version Management Tasks
  version:get:
    desc: Get current version from script
    cmds:
      - grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2

  version:update:
    desc: Update version in script manually
    interactive: true
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        read -p "Enter new version (e.g., 1.2.3): " version
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$version\"/" {{.SCRIPT_NAME}}
        echo "Version updated from $current_version to $version"


  version:validate:
    desc: Validate version format and consistency
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $version"
          echo "Expected format: X.Y.Z or X.Y.Z-prerelease (semantic versioning)"
          exit 1
        fi
        echo "Version validation passed: $version"

  # Version Bumping Tasks
  version:bump:patch:
    desc: Bump patch version (1.0.0 -> 1.0.1)
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        
        # Remove any pre-release suffix
        base_version=$(echo "$current_version" | cut -d'-' -f1)
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$base_version"
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"
        
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$new_version\"/" {{.SCRIPT_NAME}}
        echo "Version bumped from $current_version to $new_version"
  version:bump:minor:
    desc: Bump minor version (1.0.0 -> 1.1.0)
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        
        # Remove any pre-release suffix
        base_version=$(echo "$current_version" | cut -d'-' -f1)
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$base_version"
        new_minor=$((minor + 1))
        new_version="$major.$new_minor.0"
        
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$new_version\"/" {{.SCRIPT_NAME}}
        echo "Version bumped from $current_version to $new_version"
  version:bump:major:
    desc: Bump major version (1.0.0 -> 2.0.0)
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        
        # Remove any pre-release suffix
        base_version=$(echo "$current_version" | cut -d'-' -f1)
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$base_version"
        new_major=$((major + 1))
        new_version="$new_major.0.0"
        
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$new_version\"/" {{.SCRIPT_NAME}}
        echo "Version bumped from $current_version to $new_version"
  version:bump:dev:
    desc: Create development version (1.0.0 -> 1.0.1-dev)
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        
        # Remove any existing pre-release suffix
        base_version=$(echo "$current_version" | cut -d'-' -f1)
        
        # If already a dev version, just update the base
        if [[ "$current_version" =~ -dev ]]; then
          new_version="$base_version-dev"
        else
          # Split version into parts and bump patch
          IFS='.' read -r major minor patch <<< "$base_version"
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch-dev"
        fi
        
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$new_version\"/" {{.SCRIPT_NAME}}
        echo "Version bumped from $current_version to $new_version"

  version:bump:rc:
    desc: Create release candidate (1.0.0 -> 1.0.1-rc.1)
    interactive: true
    cmds:
      - |
        current_version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current version: $current_version"
        
        # Remove any existing pre-release suffix
        base_version=$(echo "$current_version" | cut -d'-' -f1)
        
        read -p "Enter RC number (default: 1): " rc_num
        rc_num=${rc_num:-1}
        
        # Split version into parts and bump patch
        IFS='.' read -r major minor patch <<< "$base_version"
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch-rc.$rc_num"
        
        sed -i.bak "s/readonly SCRIPT_VERSION=.*/readonly SCRIPT_VERSION=\"$new_version\"/" {{.SCRIPT_NAME}}
        echo "Version bumped from $current_version to $new_version"

  # Git Tag Tasks
  tag:create:
    desc: Create git tag for current version
    deps: [version:validate]
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        
        # Check for uncommitted changes
        if git status --porcelain | grep -q .; then
          echo "Error: Cannot create tag with uncommitted changes!"
          echo "Please commit or stash your changes first."
          git status --short
          exit 1
        fi
        
        # Check if tag already exists
        if git tag -l | grep -q "^v$version$"; then
          echo "Tag v$version already exists!"
          echo "Use 'task tag:delete' to remove it first, or bump the version."
          exit 1
        fi
        
        # Verify script version matches what we're about to tag
        committed_version=$(git show HEAD:{{.SCRIPT_NAME}} | grep "readonly SCRIPT_VERSION=" | cut -d'"' -f2)
        if [ "$committed_version" != "$version" ]; then
          echo "Error: Version mismatch!"
          echo "  Working directory version: $version"
          echo "  Committed version: $committed_version"
          echo "Please commit the version change first."
          exit 1
        fi
        
        git tag -a "v$version" -m "Release v$version"
        echo "Created tag v$version"

  tag:push:
    desc: Push git tag to origin
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        git push origin "v$version"
        echo "Pushed tag v$version"

  tag:delete:
    desc: Delete git tag (local and remote)
    interactive: true
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        read -p "Delete tag v$version? (y/N): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
          git tag -d "v$version" 2>/dev/null || true
          git push origin ":refs/tags/v$version" 2>/dev/null || true
          echo "Deleted tag v$version"
        else
          echo "Tag deletion cancelled"
        fi

  tag:fix-mismatch:
    desc: Fix version mismatch by recreating tag from current commit
    interactive: true
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Current script version: $version"
        
        # Check if tag exists
        if ! git tag -l | grep -q "^v$version$"; then
          echo "Tag v$version does not exist. Nothing to fix."
          exit 0
        fi
        
        # Check if there are uncommitted changes
        if git status --porcelain | grep -q .; then
          echo "You have uncommitted changes. Please commit them first:"
          git status --short
          echo ""
          read -p "Commit changes and recreate tag v$version? (y/N): " confirm
          if [[ "$confirm" =~ ^[Yy]$ ]]; then
            git add {{.SCRIPT_NAME}}
            git commit -m "Bump version to $version"
            echo "Changes committed"
          else
            echo "Operation cancelled"
            exit 1
          fi
        fi
        
        echo "Recreating tag v$version from current commit..."
        read -p "Continue? This will delete and recreate the tag. (y/N): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
          # Delete existing tag
          git tag -d "v$version" 2>/dev/null || true
          git push origin ":refs/tags/v$version" 2>/dev/null || true
          echo "Deleted old tag v$version"
          
          # Create new tag
          git tag -a "v$version" -m "Release v$version"
          git push origin "v$version"
          echo "Recreated and pushed tag v$version"
        else
          echo "Tag recreation cancelled"
        fi

  # Release Tasks
  release:patch:
    desc: Release patch version (bug fixes) - quick workflow
    cmds:
      - task: lint
      - task: syntax
      - task: test-essential
      - task: version:bump:patch
      - task: release:commit-and-publish

  release:minor:
    desc: Release minor version (new features) - quick workflow
    cmds:
      - task: lint
      - task: syntax
      - task: test-essential
      - task: version:bump:minor
      - task: release:commit-and-publish

  release:major:
    desc: Release major version (breaking changes) - full workflow
    cmds:
      - task: test-all
      - task: version:bump:major
      - task: release:commit-and-publish

  release:rc:
    desc: Release candidate version - quick workflow
    cmds:
      - task: lint
      - task: syntax
      - task: test-essential
      - task: version:bump:rc
      - task: release:commit-and-publish

  # Full release workflows (for when you want comprehensive testing)
  release:patch:full:
    desc: Release patch version with full test suite
    cmds:
      - task: test-all
      - task: version:bump:patch
      - task: release:commit-and-publish

  release:minor:full:
    desc: Release minor version with full test suite
    cmds:
      - task: test-all
      - task: version:bump:minor
      - task: release:commit-and-publish

  release:rc:full:
    desc: Release candidate with full test suite
    cmds:
      - task: test-all
      - task: version:bump:rc
      - task: release:commit-and-publish

  release:dev:
    desc: Development version for testing
    cmds:
      - task: test-basic
      - task: version:bump:dev
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Development version created: $version"

  # Quick release workflows (minimal testing)
  release:quick:patch:
    desc: Quick patch release (lint + basic tests only)
    cmds:
      - task: lint
      - task: test-basic
      - task: version:bump:patch
      - task: release:commit-and-publish

  release:quick:minor:
    desc: Quick minor release (lint + basic tests only)
    cmds:
      - task: lint
      - task: test-basic
      - task: version:bump:minor
      - task: release:commit-and-publish

  release:emergency:
    desc: Emergency release (version bump and publish only - USE WITH CAUTION)
    interactive: true
    cmds:
      - |
        echo "⚠️  EMERGENCY RELEASE MODE ⚠️"
        echo "This will skip ALL testing and publish immediately!"
        echo "Only use this for critical hotfixes."
        echo ""
        read -p "Are you sure you want to proceed? (type 'EMERGENCY' to confirm): " confirm
        if [ "$confirm" != "EMERGENCY" ]; then
          echo "Emergency release cancelled"
          exit 1
        fi
        echo "Proceeding with emergency release..."
      - task: version:bump:patch
      - task: release:commit-and-publish

  release:commit-and-publish:
    desc: Commit version changes and publish release
    internal: true
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "Committing version $version..."
        
        # Check if there are changes to commit
        if git status --porcelain | grep -q .; then
          git add {{.SCRIPT_NAME}}
          git commit -m "Bump version to $version"
          echo "Version changes committed"
        else
          echo "No changes to commit"
        fi
      - task: release:publish

  release:publish:
    desc: Publish current version (create and push tag)
    deps: [version:validate]
    cmds:
      - task: tag:create
      - task: tag:push
      - echo "Release published! GitHub Actions will handle the rest."

  release:publish:full:
    desc: Publish current version with full testing and Docker build
    deps: [version:validate]
    cmds:
      - task: test-all
      - task: docker:all
      - task: tag:create
      - task: tag:push
      - echo "Release published with full validation! GitHub Actions will handle the rest."

  release:prepare:
    desc: Prepare for release (run all checks)
    cmds:
      - task: test-all
      - task: docker:all
      - task: version:validate
      - task: docs:validate
      - echo "Release preparation complete!"

  release:status:
    desc: Show current release status and check for issues
    cmds:
      - |
        version=$(grep "readonly SCRIPT_VERSION=" {{.SCRIPT_NAME}} | cut -d'"' -f2)
        echo "=== Release Status ==="
        echo "Current version: $version"
        
        if [[ "$version" =~ -dev ]]; then
          echo "Status: Development version"
        elif [[ "$version" =~ -rc ]]; then
          echo "Status: Release candidate"
        elif [[ "$version" =~ -alpha|-beta ]]; then
          echo "Status: Pre-release version"
        else
          echo "Status: Stable release version"
        fi
        
        echo ""
        echo "=== Git Status ==="
        if git status --porcelain | grep -q .; then
          echo "Working directory: HAS UNCOMMITTED CHANGES"
          echo "Uncommitted files:"
          git status --short
        else
          echo "Working directory: CLEAN"
        fi
        
        echo ""
        echo "=== Tag Status ==="
        if git tag -l | grep -q "^v$version$"; then
          echo "Git tag: EXISTS (v$version)"
          
          # Check if committed version matches tag
          if git rev-parse --verify "v$version" >/dev/null 2>&1; then
            tagged_version=$(git show "v$version:{{.SCRIPT_NAME}}" 2>/dev/null | grep "readonly SCRIPT_VERSION=" | cut -d'"' -f2 || echo "unknown")
            if [ "$tagged_version" = "$version" ]; then
              echo "Tag version: MATCHES script version ✓"
            else
              echo "Tag version: MISMATCH! Tagged version is $tagged_version ✗"
              echo "  → Use 'task tag:fix-mismatch' to fix this"
            fi
          fi
        else
          echo "Git tag: NOT CREATED"
        fi
        
        # Check committed version vs working directory
        if git rev-parse --verify HEAD >/dev/null 2>&1; then
          committed_version=$(git show HEAD:{{.SCRIPT_NAME}} 2>/dev/null | grep "readonly SCRIPT_VERSION=" | cut -d'"' -f2 || echo "unknown")
          echo ""
          echo "=== Version Consistency ==="
          echo "Working directory version: $version"
          echo "Last committed version: $committed_version"
          
          if [ "$committed_version" = "$version" ]; then
            echo "Version consistency: OK ✓"
          else
            echo "Version consistency: MISMATCH ✗"
            echo "  → Commit your changes or use 'task tag:fix-mismatch'"
          fi
        fi

  # Documentation Tasks
  docs:help:
    desc: Generate help documentation
    deps: [make-executable]
    cmds:
      - mkdir -p docs
      - ./{{.SCRIPT_NAME}} --help > docs/help.txt
      - echo "Help documentation generated in docs/help.txt"

  docs:validate:
    desc: Validate documentation completeness
    cmds:
      - |
        files=("README.md" "LICENSE" "CONTRIBUTING.md" ".gitignore")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required file: $file"
            exit 1
          fi
        done
        echo "Documentation validation passed"

  # CI Simulation
  ci:
    desc: Simulate CI pipeline locally
    cmds:
      - task: check-deps
      - task: lint
      - task: syntax
      - task: security
      - task: test-all
      - task: performance
      - task: docker:all
      - task: docs:validate
      - echo "CI simulation completed successfully!"

  # Cleanup Tasks
  clean:
    desc: Clean up temporary files and Docker images
    cmds:
      - rm -f {{.SCRIPT_NAME}}.bak
      - rm -rf test-output
      - task: docker:clean
      - echo "Cleanup completed"

  # Development Workflow
  dev:
    desc: Development workflow - lint, test, and validate
    cmds:
      - task: lint
      - task: test-basic
      - echo "Development checks passed!"

  pre-commit:
    desc: Pre-commit checks
    cmds:
      - task: lint
      - task: syntax
      - task: security
      - task: test-basic
      - echo "Pre-commit checks passed!"

  # Installation Tasks
  install:local:
    desc: Install script to /usr/local/bin
    deps: [make-executable, test-basic]
    cmds:
      - sudo cp {{.SCRIPT_NAME}} /usr/local/bin/
      - echo "{{.SCRIPT_NAME}} installed to /usr/local/bin/"

  uninstall:local:
    desc: Remove script from /usr/local/bin
    cmds:
      - sudo rm -f /usr/local/bin/{{.SCRIPT_NAME}}
      - echo "{{.SCRIPT_NAME}} removed from /usr/local/bin/"

  # Homebrew Tasks
  # Note: Homebrew formula is maintained in separate repository: hongkongkiwi/homebrew-vsix-cli
  # Updates are handled automatically via GitHub Actions when releases are published

  # Utility Tasks
  help:
    desc: Show detailed help for common workflows
    cmds:
      - |
        echo "=== vsix-cli Development Taskfile ==="
        echo ""
        echo "🚀 Quick Start:"
        echo "  task setup              # Setup development environment"
        echo "  task dev                # Run development checks"
        echo "  task test-all           # Run full test suite"
        echo ""
        echo "📦 Release Workflow:"
        echo "  task release:patch      # Quick patch release (basic tests)"
        echo "  task release:minor      # Quick minor release (basic tests)"
        echo "  task release:major      # Major release (full tests)"
        echo "  task release:patch:full # Patch release with full test suite"
        echo "  task release:minor:full # Minor release with full test suite"
        echo "  task release:status     # Check current release status"
        echo ""
        echo "⚡ Quick Options:"
        echo "  task release:quick:patch # Fastest patch (lint + basic tests)"
        echo "  task release:quick:minor # Fastest minor (lint + basic tests)"
        echo "  task release:emergency   # Emergency release (NO TESTS - CAUTION!)"
        echo ""
        echo "🔧 Version Management:"
        echo "  task version:get        # Get current version"
        echo "  task version:bump:patch # Bump patch version"
        echo "  task version:bump:minor # Bump minor version"
        echo "  task version:bump:major # Bump major version"
        echo ""
        echo "🐳 Docker:"
        echo "  task docker:all         # Build and test Docker image"
        echo "  task docker:build       # Build Docker image"
        echo "  task docker:test        # Test Docker image"
        echo ""
        echo "🍺 Homebrew:"
        echo "  Formula maintained in: hongkongkiwi/homebrew-vsix-cli"
        echo "  Auto-updated via GitHub Actions on release"
        echo ""
        echo "🔍 Diagnostics:"
        echo "  task release:status     # Check release status and issues"
        echo "  task tag:fix-mismatch   # Fix version/tag mismatches"
        echo "  task ci                 # Simulate CI pipeline locally"
        echo ""
        echo "For a full list of tasks, run: task --list"

  validate-all:
    desc: Run all validation checks (lint, syntax, security, tests)
    cmds:
      - task: lint
      - task: syntax
      - task: security
      - task: test-all
      - task: performance
      - task: docs:validate
      - echo "All validation checks passed! ✅"

  fix-permissions:
    desc: Fix file permissions
    cmds:
      - chmod +x {{.SCRIPT_NAME}}
      - chmod +x scripts/update-homebrew-formula.sh
      - echo "File permissions fixed"