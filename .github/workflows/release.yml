name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      tag: ${{ steps.extract_version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          
          VERSION="${TAG#v}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag: $TAG"
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (semantic versioning)"
            exit 1
          fi

      - name: Check script version matches tag
        run: |
          SCRIPT_VERSION=$(grep "readonly SCRIPT_VERSION=" vsix-cli | cut -d'"' -f2)
          TAG_VERSION="${{ steps.extract_version.outputs.version }}"
          
          if [ "$SCRIPT_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch:"
            echo "  Script version: $SCRIPT_VERSION"
            echo "  Tag version: $TAG_VERSION"
            echo "Please update the SCRIPT_VERSION in vsix-cli to match the tag"
            exit 1
          fi



  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck curl jq

      - name: Make script executable
        run: chmod +x vsix-cli

      - name: Lint with ShellCheck
        run: shellcheck vsix-cli

      - name: Test basic functionality
        run: |
          ./vsix-cli --help
          ./vsix-cli version

      - name: Test dry-run commands
        run: |
          timeout 10 ./vsix-cli search python --limit 3 || true
          ./vsix-cli info ms-python.python || true
          ./vsix-cli download --dry-run ms-python.python || true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make script executable
        run: chmod +x vsix-cli

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag }}"
          
          # Extract changelog section for this version
          echo "## What's New in $TAG" > release_notes.md
          echo "" >> release_notes.md
          
          # Add basic release information
          echo "🚀 New release of vsix-cli with latest features and improvements!" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add installation instructions
          echo "" >> release_notes.md
          echo "## 📦 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Direct Download" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "# Download and install vsix-cli $TAG" >> release_notes.md
          echo "curl -O https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/vsix-cli" >> release_notes.md
          echo "chmod +x vsix-cli" >> release_notes.md
          echo "sudo mv vsix-cli /usr/local/bin/" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Docker" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "# Run directly from GitHub Container Registry" >> release_notes.md
          echo "docker run --rm ghcr.io/hongkongkiwi/vsix-cli:$TAG --help" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Download extensions to local directory" >> release_notes.md
          echo "docker run --rm -v \$(pwd):/output ghcr.io/hongkongkiwi/vsix-cli:$TAG download ms-python.python" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🔗 Verification" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "./vsix-cli version" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📁 Release Assets" >> release_notes.md
          echo "" >> release_notes.md
          echo "This release includes:" >> release_notes.md
          echo "- \`vsix-cli\` - The main executable script" >> release_notes.md
          echo "- \`Dockerfile\` - Docker build configuration" >> release_notes.md
          echo "- \`.dockerignore\` - Docker build context optimization" >> release_notes.md
          echo "- \`README.md\` - Complete documentation" >> release_notes.md
          echo "- \`LICENSE\` - MIT License" >> release_notes.md

          
          # Show the generated notes
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: vsix-cli ${{ needs.validate-release.outputs.tag }}
          body_path: release_notes.md
          files: |
            vsix-cli
            README.md
            LICENSE
            Dockerfile
            .dockerignore
          draft: false
          prerelease: false
          generate_release_notes: true

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/hongkongkiwi/vsix-cli
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max



  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, build-docker]
    if: github.repository == 'hongkongkiwi/vsix-cli'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate SHA256
        id: sha256
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          URL="https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/vsix-cli"
          echo "Downloading from: $URL"
          
          # Wait a bit for the release asset to be available
          sleep 30
          
          # Try to download and calculate SHA256 with retries
          for i in {1..5}; do
            if SHA256=$(curl -sL "$URL" | sha256sum | cut -d' ' -f1); then
              if [ -n "$SHA256" ] && [ "$SHA256" != "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
                echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                echo "SHA256: $SHA256"
                break
              fi
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          if [ -z "$SHA256" ] || [ "$SHA256" = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
            echo "Failed to download or calculate SHA256"
            exit 1
          fi

      - name: Create Homebrew formula
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"
          
          mkdir -p homebrew-formula
          cat > homebrew-formula/vsix-cli.rb << EOF
          class VsixCli < Formula
            desc "Download and install VS Code extensions from multiple marketplaces"
            homepage "https://github.com/hongkongkiwi/vsix-cli"
            url "https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/vsix-cli"
            sha256 "$SHA256"
            version "$VERSION"
            
            def install
              bin.install "vsix-cli"
            end
            
            test do
              system "#{bin}/vsix-cli", "--help"
              system "#{bin}/vsix-cli", "version"
            end
          end
          EOF
          
          echo "Generated Homebrew formula:"
          cat homebrew-formula/vsix-cli.rb

      - name: Upload Homebrew formula as artifact
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: homebrew-formula/vsix-cli.rb

  notify-release:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "# 🎉 vsix-cli $TAG Released!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully released vsix-cli version $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- [vsix-cli script](https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/vsix-cli)" >> $GITHUB_STEP_SUMMARY
          echo "- [Dockerfile](https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/Dockerfile)" >> $GITHUB_STEP_SUMMARY
          echo "- [.dockerignore](https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/.dockerignore)" >> $GITHUB_STEP_SUMMARY
          echo "- [README.md](https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [LICENSE](https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/LICENSE)" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Quick Install" >> $GITHUB_STEP_SUMMARY
          echo "### Direct Download" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "curl -O https://github.com/hongkongkiwi/vsix-cli/releases/download/$TAG/vsix-cli" >> $GITHUB_STEP_SUMMARY
          echo "chmod +x vsix-cli" >> $GITHUB_STEP_SUMMARY
          echo "sudo mv vsix-cli /usr/local/bin/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### Docker" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/hongkongkiwi/vsix-cli:$TAG --help" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/hongkongkiwi/vsix-cli/releases/tag/$TAG)" >> $GITHUB_STEP_SUMMARY
          echo "- [Documentation](https://github.com/hongkongkiwi/vsix-cli#readme)" >> $GITHUB_STEP_SUMMARY
          echo "- [Contributing](https://github.com/hongkongkiwi/vsix-cli/blob/main/CONTRIBUTING.md)" >> $GITHUB_STEP_SUMMARY

      - name: Comment on related issues
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const tag = '${{ needs.validate-release.outputs.tag }}';
            const version = '${{ needs.validate-release.outputs.version }}';
            
            try {
              // Get issues that might be resolved by this release
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                since: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
                labels: 'resolved'
              });
              
              const releaseComment = `🎉 This issue has been resolved in [${tag}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tag})!
              
              **Installation:**
              \`\`\`bash
              curl -O https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${tag}/vsix-cli
              chmod +x vsix-cli
              sudo mv vsix-cli /usr/local/bin/
              \`\`\`
              
              Thank you for your contribution! 🙏`;
              
              for (const issue of issues) {
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: releaseComment
                  });
                  console.log(`Commented on issue #${issue.number}`);
                } catch (error) {
                  console.log(`Could not comment on issue #${issue.number}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Error processing issues: ${error.message}`);
            } 