name: "CodeQL Security Analysis"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch: {}

jobs:
  analyze:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create CodeQL config
      run: |
        mkdir -p .github/codeql
        cat > .github/codeql/codeql-config.yml << 'EOF'
        name: "vsix-cli CodeQL config"
        
        disable-default-queries: false
        
        queries:
          - uses: security-and-quality
          
        paths:
          - vsix-cli
          
        paths-ignore:
          - "**/*.md"
          - "**/*.txt"
          - ".git/**"
          - ".github/**"
        EOF

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript  # Closest to shell script for analysis
        config-file: ./.github/codeql/codeql-config.yml

    - name: Manual analysis for shell script
      run: |
        echo "Performing manual security analysis for shell script..."
        
        # Check for potential security issues
        echo "Checking for unsafe practices..."
        
        # Look for eval usage
        if grep -n "eval" vsix-cli; then
          echo "⚠️  Found 'eval' usage - review for security implications"
        else
          echo "✅ No 'eval' usage found"
        fi
        
        # Look for unquoted variables
        if grep -n '\$[A-Za-z_][A-Za-z0-9_]*[^"]' vsix-cli | grep -v '#'; then
          echo "⚠️  Found potentially unquoted variables"
        else
          echo "✅ No unquoted variables detected"
        fi
        
        # Look for unsafe curl/wget usage
        if grep -n "curl.*-k\|wget.*--no-check-certificate" vsix-cli; then
          echo "⚠️  Found insecure download commands"
        else
          echo "✅ No insecure download commands found"
        fi
        
        # Look for hardcoded secrets patterns
        if grep -n -i "password\|secret\|key\|token" vsix-cli | grep -v "# \|Show\|read" | grep "="; then
          echo "⚠️  Found potential hardcoded secrets"
        else
          echo "✅ No hardcoded secrets detected"
        fi
        
        # Check for proper error handling
        if ! grep -q "set -euo pipefail" vsix-cli; then
          echo "⚠️  Script doesn't use strict error handling"
        else
          echo "✅ Strict error handling enabled"
        fi
        
        # Check for command injection vulnerabilities
        if grep -n '\$(.*\$' vsix-cli | grep -v '$(date\|$(echo\|$(cat\|$(grep'; then
          echo "⚠️  Found potential command injection patterns"
        else
          echo "✅ No obvious command injection patterns found"
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for vulnerable dependencies
      run: |
        echo "Checking for security issues in dependencies..."
        
        # Check if script downloads external resources
        if grep -n "curl\|wget" vsix-cli; then
          echo "Script downloads external resources - ensure HTTPS is used"
          
          # Check that all downloads use HTTPS
          if grep -n "http://" vsix-cli; then
            echo "⚠️  Found HTTP downloads - should use HTTPS"
            exit 1
          else
            echo "✅ All downloads use HTTPS"
          fi
        fi
        
        # Check for any external script execution
        if grep -n "bash.*<(" vsix-cli; then
          echo "⚠️  Found remote script execution pattern"
          exit 1
        else
          echo "✅ No remote script execution found"
        fi

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check script integrity
      run: |
        echo "Verifying script integrity..."
        
        # Check that the script has a proper shebang
        if ! head -1 vsix-cli | grep -q "#!/bin/bash"; then
          echo "⚠️  Script missing proper shebang"
          exit 1
        else
          echo "✅ Script has proper shebang"
        fi
        
        # Check for suspicious patterns
        suspicious_patterns=(
          "rm -rf /"
          "chmod 777"
          "sudo.*rm"
          "> /dev/null 2>&1.*&"
        )
        
        for pattern in "${suspicious_patterns[@]}"; do
          if grep -q "$pattern" vsix-cli; then
            echo "⚠️  Found suspicious pattern: $pattern"
            exit 1
          fi
        done
        
        echo "✅ No suspicious patterns found"

    - name: Verify download sources
      run: |
        echo "Checking download sources..."
        
        # Extract all URLs from the script
        urls=$(grep -o 'https://[^"]*' vsix-cli | sort -u)
        
        trusted_domains=(
          "marketplace.visualstudio.com"
          "open-vsx.org" 
          "extensions.coder.com"
          "marketplace.eclipse.org"
          "api.github.com"
          "raw.githubusercontent.com"
          "github.com"
        )
        
        echo "Found URLs:"
        echo "$urls"
        
        for url in $urls; do
          domain=$(echo "$url" | sed 's|https://||' | cut -d'/' -f1)
          
          trusted=false
          for trusted_domain in "${trusted_domains[@]}"; do
            if [[ "$domain" == "$trusted_domain" ]]; then
              trusted=true
              break
            fi
          done
          
          if [[ "$trusted" == false ]]; then
            echo "⚠️  Untrusted domain found: $domain"
            exit 1
          fi
        done
        
        echo "✅ All domains are trusted" 